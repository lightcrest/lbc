#!/bin/bash

_INTERACTIVE=true
DEBUG=false

set -uo pipefail
set -o privileged
set -o noglob
set -o errtrace
set -e

_err_report () {
    err_status=$1
    trap - ERR

    cat 1>&2 <<EOF
problem executing commands:
EOF

    local i=0
    while caller $i 1>&2; do
	((i += 1))
    done
    exit $err_status
}

trap '_err_report $?' ERR

IFS=$'\n'

_EXIT_FUNCS=()

_exit_cascade () {
    local i
    for (( i = ${#_EXIT_FUNCS[@]} - 1 ; i >= 0 ; i-- )) ; do
	${_EXIT_FUNCS[$i]}
    done
}

trap '_exit_cascade' EXIT

# Start off with logging going to stderr.
_LOGFD=2

log::cmd () {
    local ret

    ret=0
    log::debug "running command: $*"
    "$@" || ret=$?

    log::debug "return value was $ret"
    return $ret
}

log::debug () {
    $DEBUG || return 0
    echo DEBUG: $* >&${_LOGFD}
    true
}

log::warning () {
    echo ERROR: $* >&${_LOGFD}
}

log::error () {
    echo ERROR: $* >&${_LOGFD}
}

log::info () {
    echo INFO: $* >&${_LOGFD}
}

_bail () {
    log::info "bailing..."
    exit 0
}

panic () {
    echo PANIC: $* >&${_LOGFD}
    echo PANIC $* >&2

    _bail
}

_TEMPDIR=$(mktemp -d)
log::debug "Temp directory is '$_TEMPDIR'..."

_cleanup_tempdir () {
    $DEBUG && return
    [[ -d "$_TEMPDIR" ]] || return 0
    rm -rf $_TEMPDIR
}

_EXIT_FUNCS+=(_cleanup_tempdir)

export _CONFIGDIR="$(pwd)"
export LBCMDDIR="$(dirname $0)"

# No arguments?  Run interactively.
if [[ ${#} -lt 1 ]] ; then
    exec bash --noprofile --rcfile $LBCMDDIR/interactive.bash -i
fi

LB_NAME="Unnamed"
NGINX_STATUS=()
KEEPALIVED_STATUS=()
KEEPALIVED_STATE=()
HOSTS=()
PRIORITY=()
VERSIONS=()
MASTER=""

_gather-hosts () {
    local h p
    while IFS=$'\t' read h p ; do
        HOSTS+=($h)
        PRIORITY+=($p)
    done < hosts
}

_write-hosts () {
    local i
    for (( i=0 ; i < ${#HOSTS[@]} ; i++ )) ; do
        printf "%s\t%s\n" ${HOSTS[$i]} ${PRIORITY[$i]}
    done > hosts
}

# Run the requested command.
cmd=$1 ; shift

if [[ $cmd != help ]] ; then

    if [[ -f config.bash ]] ; then
        . config.bash
    else
        log::warning "No local configuration file found."
    fi

    if [[ -f hosts ]] ; then
        _gather-hosts
    fi
fi

log::debug "Running '$cmd'..."

help () {
cat <<EOF
$0 [cmd]

Available commands are:
    - help		request this help
    - status		display load balancer status
    - push		updating configuration on backup hosts
    - init-host		initialize a host to work with lbc
    - promote		update the priority of a host to become the VRRP master
    - reload		reload configurations on backup hosts
EOF
}

is-dirty () {
    [[ ! -z $(git status -s) ]]
}

_ssh () {
    log::cmd ssh "${@}"
}

_put () {
    log::cmd scp "${@}"
}

_run () {
    host=$1 ; shift

    _ssh user@$host sudo "${@}"
}

_rsync () {
    log::cmd rsync --rsync-path "sudo rsync" -qrlpt "${@}"
}

update-state () {
    NGINX_STATUS=()
    KEEPALIVED_STATUS=()
    KEEPALIVED_STATE=()
    VERSIONS=()
    MASTER=""

    local host
    local state
    for host in "${HOSTS[@]}" ; do
        if _run $host systemctl --quiet is-active nginx ; then
            NGINX_STATUS+=("active")
        else
            NGINX_STATUS+=("failed")
        fi

        if _run $host systemctl --quiet is-active keepalived ; then
            KEEPALIVED_STATUS+=("active")

            if ! state=$(_run $host cat /var/run/lbc/state) ; then
                log::error "failed to obtain node state from $host"
                log::error "result was: $state"
                return 1
            fi

            if [[ $state == MASTER ]] ; then
                if [[ ! -z $MASTER ]] ; then
                    log::error "multiple masters found, which should be impossible."
                    return 1
                fi

                MASTER=$host
            fi

            KEEPALIVED_STATE+=($state)
        else
            KEEPALIVED_STATUS+=("failed")
            KEEPALIVED_STATE+=OFFLINE
        fi

        local version
        if version=$(_run $host cat /etc/lbc/version 2>/dev/null) ; then
            VERSIONS+=($version)
        else
            VERSIONS+=(UNKNOWN)
        fi

    done
}

status () {
    update-state || return 1

    local index
    index=0

    printf "Name: $LB_NAME\n\n"

    local fmt
    fmt="%-10s %-15s %-15s %-15s %-15s %-15s\n"
    printf $fmt prio host nginx keepalived state version

    while [[ $index -lt ${#HOSTS[@]} ]] ; do
        local version
        version=${VERSIONS[$index]}

        if [[ $version != UNKNOWN ]] ; then
            version=$(git show -s --format="%h %s") || version="Unable to parse version."
        fi

        printf $fmt ${PRIORITY[$index]} ${HOSTS[$index]} ${NGINX_STATUS[$index]} ${KEEPALIVED_STATUS[$index]} ${KEEPALIVED_STATE[$index]} $version
        index=$(( $index + 1 ))
    done
}

init-host () {
    if [[ ${#} -lt 1 ]] ; then
        log::error "host must be specified"
        return 1
    fi

    while [[ ${#} -gt 0 ]] ; do
        local host
        host=$1 ; shift

        log::info "Initializing host $host..."
        (cd $LBCMDDIR/remote && _rsync . user@$host:/.)
    done
}

pushConfig () {
    local host index
    if is-dirty ; then
        log::error "local configuration hasn't been committed.  refusing to push."

        return 1
    fi

    update-state || return 1

    local version
    version=$(git show --format=%H -s) || return 1

    for (( index=0 ; index < ${#HOSTS[@]} ; index++ )) ; do
        host=${HOSTS[$index]}

        if [[ $host == $MASTER ]] ; then
            log::info "Skipping master $host..."
            continue
        fi

        log::info "Updating $host..."
        _rsync --delete nginx user@$host:/etc/.
        _rsync ssl user@$host:/etc/.
        ./gen-keepalived-conf ${PRIORITY[$index]} $host | _ssh user@$host "cd /etc/keepalived && sudo tee keepalived.conf > /dev/null"
        echo $version | _run $host tee /etc/lbc/version > /dev/null
    done
}

reload () {
    local host index

    update-state || return 1

    local status
    status=0
    # Reload the configuration.
    for (( index=0 ; index < ${#HOSTS[@]} ; index++ )) ; do
        host=${HOSTS[$index]}

        if [[ $host == $MASTER ]] ; then
            log::info "Skipping master $host..."
            continue
        fi

        log::info "Reloading $host..."
        # This expects systemd/init will do a configuration test
        # before trying to reload.
        if _run $host systemctl reload nginx ; then
            _run $host systemctl reload keepalived
        else
            status=$?
            log::error "failed to reload nginx, not reloading keepalived."
        fi
    done

    return $status
}

promote () {
    if [[ ${#} -ne 1 ]] ; then
        log::error "promote requires a single hostname"
        return 1
    fi
    local targetHost
    targetHost=$1 ; shift

    update-state || return 1

    if [[ $targetHost == $MASTER ]] ; then
        log::error "you may not promote a current master"
        return 1
    fi

    local i hostIndex maxPrio
    hostIndex=""
    maxPrio=-1

    for (( i=0 ; i < ${#HOSTS[@]} ; i++ )) ; do
        if [[ $targetHost == ${HOSTS[$i]} ]] ; then
            hostIndex=$i
        fi

        if [[ ${PRIORITY[$i]} -gt $maxPrio ]] ; then
            maxPrio=${PRIORITY[$i]}
        fi
    done

    if [[ -z $hostIndex ]] ; then
        log::error "couldn't find host '$targetHost'"
        return 1
    fi

    maxPrio=$(( $maxPrio + 1 ))

    log::info "promoting $targetHost to $maxPrio..."
    PRIORITY[$hostIndex]=$maxPrio

    _write-hosts || return 1

    git add hosts && git commit -q -m "Promoted $targetHost to $maxPrio."

    pushConfig || return 1
    reload || return 1
}

case $cmd in
    help)
        help
        ;;
    status)
        status || exit $?
        ;;
    push)
        pushConfig || exit $?
        ;;
    init-host)
        init-host "${@}" || exit $?
        ;;
    promote)
        promote "${@}" || exit $?
        ;;
    reload)
        reload "${@}" || exit $?
        ;;
    *)
        log::error "'$cmd' is not a valid command."
        help
        exit 1
esac

exit 0
